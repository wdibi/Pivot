Pivot {
  Program             = Block
  Block               = Statement+
  Statement           = FunctionDeclaration
                      | VarDeclaration
                      | IfStatement
                      | IterationStatement
                      | CallStatement
                      | PrintStatement
                      | Assignment
                      | ReturnStatement
  VarDeclaration      = "all" Type  NonemptyListOf<id, ","> "<-" NonemptyListOf<Exp, ","> ";"   -- multi
                      | Type id "<-" (CallStatement | IfShort | Exp) ";"                        -- single
                      |  "(" Type id ("," Type id)+ ")"
                        "<-" "(" NonemptyListOf<Exp, ","> ")" ";"                               -- multidec
  Assignment          = id "<-" (CallStatement | Exp) ";"
  IfStatement         = "if" Exp "then" Statement+ ("else" Statement+)? ends
  IfShort             = Exp "when" (CallStatement | Exp )
                        "otherwise" (CallStatement | IfShort | Exp )
  ReturnStatement     = "return" (Exp | IfShort) ";"
  IterationStatement  = "while" Exp "do" Block ends                                             -- while
                      | "repeat" Block "until" Exp ";"                                          -- repeat
                      | "for" VarDeclaration (Exp | CallStatement)
                      	";" (CallStatement | Assignment) "do" Block ends                        -- for
  PrintStatement      = print (CallStatement | Exp)  ";"
  FunctionDeclaration = id "(" listOf<Parameter, ","> ")" "->" Type Block  ends                 -- regular
                      | "task" id "(" listOf<Parameter, ","> ")" Block ends                     -- void
  Parameter           = Type id
  CallStatement       = id "(" listOf<Exp, ","> ")" ";"                                         -- function
                      | (id | List | Dict) "<<" NonemptyListOf<FunctionCall, "<<">              -- chain
  Exp                 = Exp orop Exp1                                                           -- binary
                      | Exp1
  Exp1                = Exp1 andop Exp2                                                         -- binary
                      | Exp2
  Exp2                = Exp2 relop Exp3                                                         -- binary
                      | Exp3
  Exp3                = Exp3 addop Exp4                                                         -- binary
                      | Exp4
  Exp4                = Exp4 mulop Exp5                                                         -- binary
                      | Exp5
  Exp5                = prefixop Exp6                                                           -- unary
                      | Exp6
  Exp6                = Exp6 "**" Exp7                                                          -- binary
                      | Exp7
  Exp7                = id
                      | boollit
                      | numlit
                      | strlit
                      | charlit
                      | List                                                                    -- list
                      | Dict                                                                    -- dict
                      | "(" Exp ")"                                                             -- parens
  FunctionCall        = id "(" listOf<Exp, ","> ")"
  List                = "[" ListOf<Exp, ","> "]"
  Dict                = "{" ListOf<KeyValuePair, ","> "}"
  Type                = ( NumType | StringType | CharType | BooleanType | ListType | DictType | AutoType )
  NumType             = "num"
  StringType          = "str"
  CharType            = "char"
  BooleanType         = "bool"
  ListType            = "[" Type "]"
  DictType            = "{" Type ":" Type "}"
  AutoType            = "_"
  KeyValuePair        = Exp ":" Exp
  keyword             = ("all" | "while" | "repeat" | "if" | "else"
                      | "return" | "then" | "and" | "or" | "when" 
                      | "otherwise" | "print" | "true" | "false") ~idrest
  id                  = ~keyword ("_" | letter | "$") idrest*
  idrest              = "_" | alnum
  numlit              = digit+ ("." digit+)?
  boollit             = "true" | "false"
  char                = escape
                      | ~"\\" ~"\"" ~"'" ~"\n" any
  charlit             = "'" (char | "\"") "'"
  strlit              = "\"" (char | "\'")* "\""
  escape              = "\\\\" | "\\\"" | "\\'" | "\\n"
  andop               = "and" | "AND" | "&&"
  orop                = "or" | "OR" | "||"
  addop               = "+" | "-"
  relop               = "<=" | "<" | "==" | "!=" | ">=" | ">"
  mulop               = "*" | "/" | "%"
  prefixop            = "-" | "not" | "!"
  newline             = "\n"+
  ends                = "\n"* "end"
  print               = "print" ~alnum
}