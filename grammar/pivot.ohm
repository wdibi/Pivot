Pivot {
  Program             = Statement+
  Statement           = FunctionDeclaration
                      | IfStatement
                      | Variables
                      | IterationStatement
                      | CallStatement
                      | PrintStatment
  Block               = Statement+
  Variables           = newline* Type id "<-" (CallStatement | Exp) ";"                        -- declaration
                      | newline*  "(" Params ")"  
                        "<-" "(" NonemptyListOf<Exp, ","> ")" ";"                               -- multidec  
                      | newline* id "<-" (CallStatement | Exp) ";"                              -- assign
  IfStatement         = newline* "if" Exp "then" Statement (newline* "else" Statement)? ends
  ReturnStatement     = newline* "return" Exp ";"
  IterationStatement  = newline* "while" Exp "do" Block ends                                    -- while
                      | newline* "repeat" Block newline* "until" Exp ";"                        -- loop
  PrintStatment       = newline* print (CallStatement | Exp)  ";"
  FunctionDeclaration = newline* "func" id "(" Params ")" "->" Type Block? ReturnStatement ends -- func
                      | newline* "task" id "(" Params ")" Block ends                            -- task
  Params              = (Type id ("," Type id)*)
  CallStatement       = newline* id "(" listOf<Exp, ","> ")"                                    -- function
                      | newline* (id | List | Dict) "<->" CallStatement                         -- method
  Exp                 = Exp orop Exp1                                                           -- or
                      | Exp andop Exp1                                                          -- and
                      | Exp1
  Exp1                = Exp2 relop Exp2                                                         -- binary
                      | Exp2
  Exp2                = Exp2 addop Exp3                                                         -- binary
                      | Exp3
  Exp3                = Exp3 mulop Exp4                                                         -- binary
                      | Exp4
  Exp4                = prefixop Exp4                                                           -- unary
                      | Exp5
  Exp5                = Exp5 "**" Exp6                                                          -- binary
                      | Exp6
  Exp6                = id
                      | boollit
                      | numlit
                      | strlit
                      | charlit
                      | id
                      | List                                                                    -- list
                      | Dict                                                                    -- dict
                      | "(" Exp ")"                                                             -- parens
  List                = "[" ListOf<Exp, ","> "]"
  Dict                = "{" ListOf<KeyValuePair, ","> "}"  
  Type                = ( NumType | StringType | CharType | BooleanType | ListType | DictType )
  NumType             = "num"
  StringType          = "str"
  CharType            = "char"
  BooleanType         = "bool"
  ListType            = "[" Type "]"
  DictType            = "{" Type ":" Type "}"
  KeyValuePair        = Exp ":" Exp
  keyword             = ("while" | "repeat" | "if" | "else" 
                      | "return" | "then" | "and" | "or") ~idrest
  id                  = ~keyword ("_" | letter | "$") idrest*
  idrest              = "_" | alnum
  numlit              = digit+
  boollit             = "true" | "false"
  char                = escape
                      | ~"\\" ~"\"" ~"'" ~"\n" any
  charlit             = "'" (char | "\"") "'"
  strlit              = "\"" (char | "\'")* "\""
  escape              = "\\\\" | "\\\"" | "\\'" | "\\n"
  andop               = "and" | "AND" | "&&"
  orop                = "or" | "OR" | "||"
  addop               = "+" | "-"
  relop               = "<=" | "<" | "==" | "!=" | ">=" | ">" 
  mulop               = "*" | "/" | "%"
  prefixop            = "-" | "not" | "!"
  newline             = "\n"+
  ends                = "\n"* "end"
  print               = "print" ~alnum
}