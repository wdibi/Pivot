Pivot {
  Program             = Block
  Block               = Statement*
  Statement           = FunctionDeclaration ends
                      | VarDeclaration ";"
                      | IfStatement ends
                      | IterationStatement ends
                      | CallExpression ";"
                      | PrintStatement ";"
                      | Assignment ";"
                      | ReturnStatement ";"
                      | BreakStatement ";"
  VarDeclaration      = "all" Type  NonemptyListOf<id, ","> "<-" NonemptyListOf<Exp, ",">        -- multi
                      | Type id "<-" (CallExpression | IfShort | Exp)                            -- single
                      | "(" Type id ("," Type id)+ ")"
                        "<-" "(" NonemptyListOf<Exp, ","> ")"                                    -- multidec
  Assignment          = id "<-" (CallExpression | Exp)
  IfStatement         = if Exp then Statement+ (else Statement+)?
  IfShort             = Exp when (CallExpression | Exp)
                        otherwise (CallExpression | IfShort | Exp)
  ReturnStatement     = return (IfShort | Exp)
  BreakStatement      = "break"
  IterationStatement  = while Exp "do" Block                                                    -- while
                      | repeat Block when Exp                                                   -- repeat
                      | "for" VarDeclaration ";" (Exp | CallExpression)
                        ";" (CallExpression | Assignment) "do" Block                            -- for
  PrintStatement      = print (CallExpression | Exp)
  FunctionDeclaration = id "(" listOf<Parameter, ","> ")" "->" Type Block                       -- regular
                      | "task" id "(" listOf<Parameter, ","> ")" Block                          -- task
  Parameter           = Type id
  CallExpression      = (FunctionCall | Exp) "<<" NonemptyListOf<FunctionCall, "<<">            -- chain
                      | FunctionCall                                                            -- function
  Exp                 = Exp orop Exp1                                                           -- binary
                      | Exp1
  Exp1                = Exp1 andop Exp2                                                         -- binary
                      | Exp2
  Exp2                = Exp2 relop Exp3                                                         -- binary
                      | Exp3
  Exp3                = Exp3 addop Exp4                                                         -- binary
                      | Exp4
  Exp4                = Exp4 mulop Exp5                                                         -- binary
                      | Exp5
  Exp5                = prefixop Exp6                                                           -- unary
                      | Exp6
  Exp6                = Exp6 "**" Exp7                                                          -- binary
                      | Exp7
  Exp7                = FunctionCall
                      | id
                      | boollit
                      | numlit
                      | strlit
                      | charlit
                      | List                                                                    -- list
                      | Dict                                                                    -- dict
                      | "(" Exp ")"                                                             -- parens
  FunctionCall        = id "(" listOf<Exp, ","> ")"
  List                = "[" ListOf<Exp, ","> "]"
  Dict                = "{" ListOf<KeyValuePair, ","> "}"
  Type                = ( NumType | StringType | CharType | BooleanType | ListType | DictType | AutoType )
  NumType             = "num"
  StringType          = "str"
  CharType            = "char"
  BooleanType         = "bool"
  ListType            = "[" Type "]"
  DictType            = "{" Type ":" Type "}"
  AutoType            = "_"
  KeyValuePair        = Exp ":" Exp
  keyword             = ("all" | "while" | "repeat" | "if" | "else"
                      | "return" | "then" | "and" | "or" | "when" 
                      | "otherwise" | "print" | "true" | "false") ~idrest
  id                  = ~keyword ("_" | letter | "$") idrest*
  idrest              = "_" | alnum
  numlit              = digit+ ("." digit+)?
  boollit             = true | false
  char                = escape
                      | ~"\\" ~"\"" ~"'" ~"\n" any
  charlit             = "'" (char | "\"") "'"
  strlit              = "\"" (char | "\'")* "\""
  escape              = "\\\\" | "\\\"" | "\\'" | "\\n"
  andop               = and | "AND" | "&&"
  orop                = or | "OR" | "||"
  addop               = "+" | "-"
  relop               = "<=" | "<" | "==" | "!=" | ">=" | ">"
  mulop               = "*" | "/" | "%"
  prefixop            = "-" | "not" | "!"
  newline             = "\n"+
  ends                = "\n"* "end"
  all                 = "all" ~alnum
  while               = "while" ~alnum
  repeat              = "repeat" ~alnum
  if                  = "if" ~alnum
  else                = "else" ~alnum
  return              = "return" ~alnum
  then                = "then" ~alnum
  and                 = "and" ~alnum
  or                  = "or" ~alnum
  when                = "when" ~alnum
  otherwise           = "otherwise" ~alnum
  print               = "print" ~alnum
  true                = "true" ~alnum
  false               = "false" ~alnum
  space              +=  " " | "\t" | comment
  comment             =  "//" (~"\n" any)*                                                      -- singleline
                      | "/*" (~"*/" any)* "*/"                                                  -- multiline
}